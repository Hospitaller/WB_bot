from telegram import Update
from telegram.ext import ContextTypes
from keyboards.layouts import get_premium_kb, get_admin_kb, get_sales_menu_kb
import logging

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        mongo = context.bot_data['mongo']
        user_data = context.bot_data['user_data']
        timezone = context.bot_data['timezone']
        user_id = update.effective_user.id
        first_name = update.effective_user.first_name
        last_name = update.effective_user.last_name
        username = update.effective_user.username
        logger.info(f"Start command received from user {user_id}")
        mongo.log_activity(user_id, 'start_command')
        logger.info(f"User exists check: {user_data.is_user_exists(user_id)}")
        if not user_data.is_user_exists(user_id):
            logger.info(f"Initializing new user {user_id}")
            await update.message.reply_text(
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Wildberries.\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à WB —Ç–æ–∫–µ–Ω:\n"
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –ê–Ω–∞–ª–∏—Ç–∏–∫–∞, –ü–æ—Å—Ç–∞–≤–∫–∏\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω:"
            )
            context.user_data['waiting_for_token'] = True
            mongo.init_user(user_id, first_name, username, last_name)
            logger.info(f"User {user_id} initialized in MongoDB")
        else:
            mongo.update_user_activity(user_id, update.effective_user)
            logger.info(f"User {user_id} already exists")
            subscription_level = mongo.get_subscription_level(user_id)
            message = "–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            if subscription_level == "Premium":
                message += "\n\nPremium"
                reply_markup = get_premium_kb()
                await update.message.reply_text(message, reply_markup=reply_markup)
            elif subscription_level == "Admin":
                message += "\n\n–ü—Ä–∏–≤–µ—Ç, Admin!"
                reply_markup = get_admin_kb()
                await update.message.reply_text(message, reply_markup=reply_markup)
            else:
                await update.message.reply_text(message)
    except Exception as e:
        logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –≤ start: {str(e)}", exc_info=True)

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        mongo = context.bot_data['mongo']
        user_id = update.effective_user.id
        mongo.update_user_activity(user_id, update.effective_user)
        message = (
            "ü§ñ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ*\n\n"
            "–ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö (FBW) –≤ —Ä—É—á–Ω–æ–º –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ. –£–º–µ–µ—Ç –∏—Å–∫–∞—Ç—å –ª–∏–º–∏—Ç—ã –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø—Ä–∏–µ–º–∫—É –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É. –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.\n\n"
            "‚ö†Ô∏è *–í–∞–∂–Ω–æ:*\n"
            "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–¥–µ—Ç—Å—è –æ–¥–Ω–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º, –ø–æ—ç—Ç–æ–º—É —Ç–µ—Ä–ø–∏—Ç–µ ;-)\n"
            "–Ø —Ç–∞–∫–æ–π-–∂–µ —Å–µ–ª–ª–µ—Ä, –∫–∞–∫ –∏ –≤—ã, –ø–æ—ç—Ç–æ–º—É –ø–æ–Ω–∏–º–∞—é –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏.\n"
            "–û—à–∏–±–∫–∏ –ø—Ä–∞–≤–ª—é, –Ω–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ–±–∞–≤–ª—è—é.\n"
            "–í–æ–∑–º–æ–∂–Ω—ã –ø–æ—Ç–µ—Ä–∏ –≤–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫, –Ω–æ —è —Å—Ç–∞—Ä–∞—é—Å—å —ç—Ç–æ–≥–æ –∏–∑–±–µ–∂–∞—Ç—å.\n"
            "–ù–∞—à–ª–∏ –±–∞–≥ –∏–ª–∏ –ø–æ—è–≤–∏–ª–∞—Å—å –∏–¥–µ—è? –ü–∏—à–∏—Ç–µ –≤ –¢–ì - @Tolfti \n"
        )
        await update.message.reply_text(
            message,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –≤ info: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        mongo = context.bot_data['mongo']
        user_data = context.bot_data['user_data']
        user_id = update.effective_user.id
        mongo.update_user_activity(user_id, update.effective_user)
        if context.user_data.get('waiting_for_token'):
            token = update.message.text.strip()
            user_data.add_user(user_id, token)
            mongo.init_user(user_id)
            mongo.update_user_activity(user_id, update.effective_user)
            mongo.log_activity(user_id, 'token_added')
            context.user_data['waiting_for_token'] = False
            await update.message.reply_text(
                "‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞. –£–¥–∞—á–∏!\n\n"
                "–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            )
        elif context.user_data.get('waiting_for_broadcast'):
            subscription_level = mongo.get_subscription_level(user_id)
            if subscription_level != "Admin":
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
                return
            context.user_data['broadcast_text'] = update.message.text
            await update.message.reply_text(
                "‚úÖ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."
            )
        else:
            mongo.log_activity(user_id, 'message_received')
            await update.message.reply_text(
                "–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            )
    except Exception as e:
        logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")

__all__ = [
    'start',
    'info',
    'handle_message',
]
