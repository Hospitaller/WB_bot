from telegram import Update
from telegram.ext import ContextTypes
from keyboards.layouts import get_stock_menu_kb
import logging

logger = logging.getLogger(__name__)

async def check_stock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        mongo = context.bot_data['mongo']
        user_id = update.effective_user.id
        mongo.log_activity(user_id, 'check_stock_menu_opened')
        reply_markup = get_stock_menu_kb()
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    except Exception as e:
        logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –≤ check_stock: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")

async def check_all_stock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        mongo = context.bot_data['mongo']
        user_data = context.bot_data['user_data']
        timezone = context.bot_data['timezone']
        user_id = update.effective_user.id
        mongo.log_activity(user_id, 'check_stock_requested')
        from services.stock import fetch_wb_data
        class FakeContext:
            def __init__(self, chat_id, bot):
                self._chat_id = chat_id
                self.bot = bot
        fake_context = FakeContext(update.effective_chat.id, context.bot)
        await fetch_wb_data(fake_context, mongo, user_data, timezone)
    except Exception as e:
        logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –≤ check_all_stock: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")

async def start_auto_stock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        mongo = context.bot_data['mongo']
        user_data = context.bot_data['user_data']
        timezone = context.bot_data['timezone']
        active_jobs = context.bot_data['active_jobs']
        user_id = update.effective_user.id
        mongo.log_activity(user_id, 'auto_stock_started')
        from services.stock import start_periodic_checks
        await start_periodic_checks(update.effective_chat.id, mongo, user_data, timezone, active_jobs)
        await update.message.reply_text(
            f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã (–∫–∞–∂–¥—ã–µ {context.bot_data['CHECK_STOCK_INTERVAL']} –º–∏–Ω—É—Ç(—ã) –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è)"
        )
    except Exception as e:
        logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –≤ start_auto_stock: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")

async def stop_auto_stock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        mongo = context.bot_data['mongo']
        active_jobs = context.bot_data['active_jobs']
        user_id = update.effective_user.id
        mongo.log_activity(user_id, 'auto_stock_stopped')
        from services.stock import stop_periodic_checks
        if await stop_periodic_checks(update.effective_chat.id, active_jobs):
            await update.message.reply_text("üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫")
    except Exception as e:
        logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –≤ stop_auto_stock: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")

__all__ = [
    'check_stock',
    'check_all_stock',
    'start_auto_stock',
    'stop_auto_stock',
] 