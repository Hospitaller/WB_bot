from telegram import Update
from telegram.ext import ContextTypes
from keyboards.layouts import get_broadcast_kb, get_admin_kb
import logging

logger = logging.getLogger(__name__)

async def admin_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        bot = context.bot_data.get('wb_bot')
        user_id = update.effective_user.id
        subscription_level = bot.mongo.get_subscription_level(user_id)
        if subscription_level != "Admin":
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return
        stats = bot.mongo.get_user_statistics()
        message = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total']}\n"
            f"Base: {stats['base']}\n"
            f"Premium: {stats['premium']}"
        )
        await update.message.reply_text(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def send_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        bot = context.bot_data.get('wb_bot')
        user_id = update.effective_user.id
        subscription_level = bot.mongo.get_subscription_level(user_id)
        if subscription_level != "Admin":
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
            return
        context.user_data['waiting_for_broadcast'] = True
        reply_markup = get_broadcast_kb()
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –≤ send_messages: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")

async def broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        bot = context.bot_data.get('wb_bot')
        user_id = update.effective_user.id
        subscription_level = bot.mongo.get_subscription_level(user_id)
        if subscription_level != "Admin":
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
            return
        message_text = update.message.text
        users = bot.mongo.get_all_users()
        banned_users = bot.mongo.get_banned_users()
        success_count = 0
        fail_count = 0
        for user in users:
            if user['user_id'] not in banned_users:
                try:
                    await context.bot.send_message(
                        chat_id=user['user_id'],
                        text=message_text
                    )
                    success_count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {str(e)}")
                    fail_count += 1
        await update.message.reply_text(
            f"‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
            f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
            f"–û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: {fail_count}"
        )
        context.user_data['waiting_for_broadcast'] = False
    except Exception as e:
        logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –≤ broadcast_message: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞") 