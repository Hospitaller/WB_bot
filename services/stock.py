import logging
import aiohttp
import asyncio
from datetime import datetime, time, timedelta
from config import CONFIG
from services.api_utils import make_api_request
from services.utils import format_stock_message

logger = logging.getLogger(__name__)

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–ª–∞–¥–µ

def format_stock_data(data, user_id: int, mongo, highlight_low=False):
    if not isinstance(data, list):
        return None
    result = []
    low_stock_items = []
    user_settings = mongo.get_user_settings(user_id)
    global_settings = mongo.get_global_settings()
    low_stock_threshold = user_settings.get('low_stock_threshold', global_settings.get('low_stock_threshold', 20))
    for item in data:
        vendor_code = item.get('vendorCode', 'N/A')
        warehouses = item.get('warehouses', [])
        total_warehouse = next(
            (wh for wh in warehouses if wh.get('warehouseName') == "–í—Å–µ–≥–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö"),
            None
        )
        if not total_warehouse:
            continue
        quantity = total_warehouse.get('quantity', 0)
        item_text = (
            f"–ê—Ä—Ç–∏–∫—É–ª: {vendor_code}\n"
            f"–û—Å—Ç–∞—Ç–æ–∫: {quantity}\n"
            f"{'-'*30}"
        )
        result.append(item_text)
        if quantity <= low_stock_threshold:
            low_stock_items.append(item_text)
    if highlight_low:
        return low_stock_items
    return result

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async def fetch_wb_data(context, user_data, mongo, timezone):
    chat_id = context.job.chat_id if hasattr(context, 'job') else context._chat_id
    is_auto_check = hasattr(context, 'job')
    from services.utils import is_working_time
    if is_auto_check and not is_working_time(chat_id, mongo, timezone, True):
        logger.info(f"–°–µ–π—á–∞—Å –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        return
    try:
        wb_token = user_data.get_user_token(chat_id)
        if not wb_token:
            await context.bot.send_message(chat_id=chat_id, text="‚ùå –¢–æ–∫–µ–Ω WB –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start")
            return
        headers = {
            'Accept': 'application/json',
            'Authorization': wb_token
        }
        settings = mongo.get_user_settings(chat_id)
        timeout = aiohttp.ClientTimeout(total=60)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            await context.bot.send_message(chat_id=chat_id, text="üîÑ –°—á–∏—Ç–∞—é –æ—Å—Ç–∞—Ç–∫–∏..")
            first_response = await make_api_request(session, settings['api']['urls']['stock_request'], headers, context, chat_id)
            if not first_response:
                return
            task_id = first_response.get('data', {}).get('taskId')
            if not task_id:
                await context.bot.send_message(chat_id=chat_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å task ID")
                return
            await asyncio.sleep(settings['api']['request_delay'])
            second_url = settings['api']['urls']['stock_download'].format(task_id=task_id)
            stock_data = await make_api_request(session, second_url, headers, context, chat_id)
            if not stock_data:
                return
            formatted_data = format_stock_data(stock_data, chat_id, mongo)
            low_stock_data = format_stock_data(stock_data, chat_id, mongo, highlight_low=True)
            messages = format_stock_message(formatted_data, low_stock_data)
            for message in messages:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=message
                )
    except Exception as e:
        logger.critical(f"CRITICAL ERROR for chat {chat_id}: {str(e)}", exc_info=True)
        await context.bot.send_message(chat_id=chat_id, text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

# –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
async def start_periodic_checks(application, chat_id, user_data, mongo):
    try:
        # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å WBStockBot.active_jobs
        if hasattr(application, 'active_jobs') and chat_id in application.active_jobs:
            application.active_jobs[chat_id].schedule_removal()
        job = application.job_queue.run_repeating(
            callback=lambda context: fetch_wb_data(context, user_data, mongo, pytz.timezone('Europe/Moscow')),
            interval=timedelta(minutes=CONFIG['CHECK_STOCK_INTERVAL']),
            first=0,
            chat_id=chat_id,
            name=str(chat_id)
        )
        if hasattr(application, 'active_jobs'):
            application.active_jobs[chat_id] = job
        user_data.set_auto_check_status(chat_id, True)
        return job
    except Exception as e:
        logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {str(e)}", exc_info=True)
        raise

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
async def stop_periodic_checks(application, chat_id, user_data):
    try:
        if hasattr(application, 'active_jobs') and chat_id in application.active_jobs:
            application.active_jobs[chat_id].schedule_removal()
            del application.active_jobs[chat_id]
            user_data.set_auto_check_status(chat_id, False)
            return True
        return False
    except Exception as e:
        logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {str(e)}", exc_info=True)
        raise

__all__ = [
    'format_stock_data',
    'fetch_wb_data',
    'start_periodic_checks',
    'stop_periodic_checks',
]
