import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
import aiohttp
import json
from datetime import datetime, time, timedelta
import os
import asyncio
import pytz
import signal
from dotenv import load_dotenv
from user_data import UserData
from config import CONFIG
from mongo_db import MongoDB
import telegram

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs('logs', exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(CONFIG['LOG_FILE']),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
filter_logger = logging.getLogger('filter_logger')
filter_logger.setLevel(logging.INFO)
filter_handler = logging.FileHandler('logs/filter.log', encoding='utf-8')
filter_handler.setFormatter(logging.Formatter('%(asctime)s - %(message)s'))
filter_logger.addHandler(filter_handler)

# –ö–ª–∞—Å—Å –±–æ—Ç–∞
class WBStockBot:
    def __init__(self, application):
        self.application = application
        self.active_jobs = {}
        self.active_coefficient_jobs = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
        self.user_data = UserData()
        self.mongo = MongoDB()
        self.timezone = pytz.timezone('Europe/Moscow')
        self.warehouse_selection = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤
        self.warehouse_selection_order = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —Å–∫–ª–∞–¥–æ–≤
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.load_saved_warehouses()

    def load_saved_warehouses(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users = self.mongo.settings.find({'user_id': {'$exists': True}})
        for user in users:
            user_id = user['user_id']
            warehouses = self.mongo.get_selected_warehouses(user_id)
            if warehouses:
                self.warehouse_selection[user_id] = set(warehouses)
                self.warehouse_selection_order[user_id] = warehouses

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
    def is_working_time(self, user_id: int, is_auto_check: bool = False):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è"""
        try:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            if not is_auto_check:
                return True
                
            settings = self.mongo.get_user_settings(user_id)
            if not settings:
                logger.error(f"No settings found for user {user_id} in is_working_time")
                return False
                
            now = datetime.now(self.timezone)
            current_time = now.time()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
            working_hours = settings.get('working_hours', {})
            working_hours_start = working_hours.get('start', 9)
            working_hours_end = working_hours.get('end', 22)
            
            # –ï—Å–ª–∏ start=0 –∏ end=0, –∑–Ω–∞—á–∏—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ—Ç
            if working_hours_start == 0 and working_hours_end == 0:
                logger.info(f"No working hours restrictions for user {user_id}")
                return True
            
            working_hours_start = time(hour=working_hours_start)
            working_hours_end = time(hour=working_hours_end)
            
            logger.info(f"Checking working hours for user {user_id}:")
            logger.info(f"Current time: {current_time}")
            logger.info(f"Working hours start: {working_hours_start}")
            logger.info(f"Working hours end: {working_hours_end}")
            logger.info(f"Settings: {settings}")
            
            is_working = working_hours_start <= current_time < working_hours_end
            logger.info(f"Is working time: {is_working}")
            
            return is_working
        except Exception as e:
            logger.error(f"Error checking working hours for user {user_id}: {str(e)}", exc_info=True)
            return False

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–ª–∞–¥–µ
    def format_stock_data(self, data, user_id: int, highlight_low=False):
        if not isinstance(data, list):
            return None
        result = []
        low_stock_items = []
        
        user_settings = self.mongo.get_user_settings(user_id)
        global_settings = self.mongo.get_global_settings()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ
        low_stock_threshold = user_settings.get('low_stock_threshold', global_settings.get('low_stock_threshold', 20))
        
        for item in data:
            vendor_code = item.get('vendorCode', 'N/A')
            warehouses = item.get('warehouses', [])
            
            total_warehouse = next(
                (wh for wh in warehouses if wh.get('warehouseName') == "–í—Å–µ–≥–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö"),
                None
            )
            
            if not total_warehouse:
                continue
                
            quantity = total_warehouse.get('quantity', 0)
            
            item_text = (
                f"–ê—Ä—Ç–∏–∫—É–ª: {vendor_code}\n"
                f"–û—Å—Ç–∞—Ç–æ–∫: {quantity}\n"
                f"{'-'*30}"
            )
            
            result.append(item_text)
            
            if quantity <= low_stock_threshold:
                low_stock_items.append(item_text)
        
        if highlight_low:
            return low_stock_items
        return result
    
    #–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    async def fetch_wb_data(self, context: ContextTypes.DEFAULT_TYPE):
        chat_id = context.job.chat_id if hasattr(context, 'job') else context._chat_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        is_auto_check = hasattr(context, 'job')
        if is_auto_check and not self.is_working_time(chat_id, True):
            logger.info(f"–°–µ–π—á–∞—Å –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            return
            
        try:
            wb_token = self.user_data.get_user_token(chat_id)
            if not wb_token:
                await context.bot.send_message(chat_id=chat_id, text="‚ùå –¢–æ–∫–µ–Ω WB –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start")
                return

            headers = {
                'Accept': 'application/json',
                'Authorization': wb_token
            }
            
            settings = self.mongo.get_user_settings(chat_id)
            timeout = aiohttp.ClientTimeout(total=60)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                await context.bot.send_message(chat_id=chat_id, text="üîÑ –°—á–∏—Ç–∞—é –æ—Å—Ç–∞—Ç–∫–∏..")
                first_response = await self.make_api_request(session, settings['api']['urls']['stock_request'], headers, context, chat_id)
                
                if not first_response:
                    return
                
                task_id = first_response.get('data', {}).get('taskId')
                if not task_id:
                    await context.bot.send_message(chat_id=chat_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å task ID")
                    return
                
                await asyncio.sleep(settings['api']['request_delay'])
                
                second_url = settings['api']['urls']['stock_download'].format(task_id=task_id)
                stock_data = await self.make_api_request(session, second_url, headers, context, chat_id)
                
                if not stock_data:
                    return
                
                formatted_data = self.format_stock_data(stock_data, chat_id)
                low_stock_data = self.format_stock_data(stock_data, chat_id, highlight_low=True)
                
                if formatted_data:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text="üì¶ –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö:\n" + "\n".join(formatted_data)
                    )
                
                if low_stock_data:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text="‚ö†Ô∏è –¢–û–í–ê–†–´ –ó–ê–ö–ê–ù–ß–ò–í–ê–Æ–¢–°–Ø! ‚ö†Ô∏è\n" + "\n".join(low_stock_data)
                    )
                
        except Exception as e:
            logger.critical(f"CRITICAL ERROR for chat {chat_id}: {str(e)}", exc_info=True)
            await context.bot.send_message(chat_id=chat_id, text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

    #–í—ã–ø–æ–ª–Ω—è–µ—Ç API –∑–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    async def make_api_request(self, session, url, headers, context, chat_id, max_retries=3, timeout=30):
        for attempt in range(max_retries):
            try:
                async with session.get(url, headers=headers, timeout=timeout) as response:
                    if response.status != 200:
                        error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status}"
                        logger.critical(f"CRITICAL: {error_msg} –¥–ª—è URL: {url}")
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text=f"‚ùå {error_msg}"
                        )
                        return None
                    return await response.json()
            except asyncio.TimeoutError:
                if attempt < max_retries - 1:
                    logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}/{max_retries}, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
                    await asyncio.sleep(5)
                    continue
                error_msg = "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
                logger.critical(f"CRITICAL: {error_msg} –¥–ª—è URL: {url}")
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ùå {error_msg}"
                )
                return None
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
                logger.critical(f"CRITICAL: {error_msg} –¥–ª—è URL: {url}", exc_info=True)
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ùå {error_msg}"
                )
                return None

    #–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    async def start_periodic_checks(self, chat_id: int):
        try:
            if chat_id in self.active_jobs:
                self.active_jobs[chat_id].schedule_removal()
            
            job = self.application.job_queue.run_repeating(
                callback=self.fetch_wb_data,
                interval=timedelta(minutes=CONFIG['CHECK_STOCK_INTERVAL']),
                first=0,
                chat_id=chat_id,
                name=str(chat_id)
            )
            self.active_jobs[chat_id] = job
            self.user_data.set_auto_check_status(chat_id, True)
            return job
        except Exception as e:
            logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {str(e)}", exc_info=True)
            raise

    #–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    async def stop_periodic_checks(self, chat_id: int):
        try:
            if chat_id in self.active_jobs:
                self.active_jobs[chat_id].schedule_removal()
                del self.active_jobs[chat_id]
                self.user_data.set_auto_check_status(chat_id, False)
                return True
            return False
        except Exception as e:
            logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {str(e)}", exc_info=True)
            raise

    #–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —Å–∫–ª–∞–¥–æ–≤
    async def get_warehouse_coefficients(self, context: ContextTypes.DEFAULT_TYPE):
        chat_id = context.job.chat_id if hasattr(context, 'job') else context._chat_id
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = self.mongo.get_user_settings(chat_id)
            if not settings:
                logger.error(f"No settings found for user {chat_id} in get_warehouse_coefficients")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã
            warehouses = settings.get('warehouses', {})
            paused_warehouses = warehouses.get('paused', [])
            target_warehouses = warehouses.get('target', [])
            
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–∑–∞–ø—Ä–æ—Å "–í—Å–µ —Å–∫–ª–∞–¥—ã"), 
            # —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã
            is_auto_check = hasattr(context, 'job')
            
            if is_auto_check and paused_warehouses:
                last_notification = self.mongo.get_last_notification(chat_id)
                if last_notification:
                    working_hours = settings.get('working_hours', {})
                    next_day_start = datetime.combine(
                        last_notification.date() + timedelta(days=1),
                        time(hour=working_hours.get('start', 9))
                    )
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º next_day_start –≤ aware datetime —Å –Ω—É–∂–Ω—ã–º —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
                    next_day_start = self.timezone.localize(next_day_start)
                    current_time = datetime.now(self.timezone)
                    
                    if current_time >= next_day_start:
                        # –û—á–∏—â–∞–µ–º paused —Å–∫–ª–∞–¥—ã
                        self.mongo.update_user_settings(chat_id, {
                            'warehouses': {
                                'paused': []
                            }
                        })
                        logger.info(f"Reset paused warehouses for user {chat_id} as it's next day")
                        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
                        settings = self.mongo.get_user_settings(chat_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            wb_token = self.user_data.get_user_token(chat_id)
            if not wb_token:
                await context.bot.send_message(chat_id=chat_id, text="‚ùå –¢–æ–∫–µ–Ω WB –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –ê–Ω–∞–ª–∏—Ç–∏–∫–∞, –ü–æ—Å—Ç–∞–≤–∫–∏")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã
            warehouses = settings.get('warehouses', {})
            paused_warehouses = warehouses.get('paused', [])
            target_warehouses = warehouses.get('target', [])
            
            # –ï—Å–ª–∏ –≤—Å–µ —Ü–µ–ª–µ–≤—ã–µ —Å–∫–ª–∞–¥—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            if target_warehouses and all(str(wh) in paused_warehouses for wh in target_warehouses):
                logger.info(f"All target warehouses are paused for user {chat_id}, skipping check")
                return

            headers = {
                'Accept': 'application/json',
                'Authorization': wb_token
            }
            
            timeout = aiohttp.ClientTimeout(total=60)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                if not hasattr(context, 'job'):
                    await context.bot.send_message(chat_id=chat_id, text="üîÑ –ü–æ–ª—É—á–∞—é –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å–∫–ª–∞–¥–æ–≤...")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏ —Ç–∞—Ä–∏—Ñ—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                coefficients_response = await self.make_api_request(session, settings['api']['urls']['coefficients'], headers, context, chat_id)
                tariffs_data = await self.get_warehouse_tariffs(context, chat_id)
                
                if not coefficients_response or not isinstance(coefficients_response, list):
                    await context.bot.send_message(chat_id=chat_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞—Ö")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–ª–∞–¥–æ–≤
                warehouses = settings.get('warehouses', {})
                target_warehouses = warehouses.get('target', [])
                excluded_warehouses = warehouses.get('excluded', [])
                paused_warehouses = warehouses.get('paused', [])
                
                target_names = set()  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ü–µ–ª–µ–≤—ã—Ö —Å–∫–ª–∞–¥–æ–≤
                excluded_names = set()  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                filtered_data = {}
                
                for item in coefficients_response:
                    warehouse_id = None
                    try:
                        warehouse_id = item.get('warehouseID')
                        if warehouse_id is None:
                            continue
                            
                        warehouse_id = int(warehouse_id)
                        warehouse_name = item.get('warehouseName', 'N/A')
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã
                        if str(warehouse_id) in paused_warehouses:
                            continue
                        
                        # –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–µ–ª–µ–≤—ã—Ö —Å–∫–ª–∞–¥–æ–≤
                        if warehouse_id in target_warehouses:
                            target_names.add(warehouse_name)
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–ª–∞–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                        if str(warehouse_id) in excluded_warehouses:
                            excluded_names.add(warehouse_name)
                            continue
                        
                        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã —Ü–µ–ª–µ–≤—ã–µ —Å–∫–ª–∞–¥—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                        if target_warehouses and warehouse_id not in target_warehouses:
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                        thresholds = settings.get('thresholds', {})
                        if (item.get('boxTypeName') == "–ö–æ—Ä–æ–±–∞" and 
                            item.get('coefficient') >= thresholds.get('min_coefficient', 0) and 
                            item.get('coefficient') <= thresholds.get('max_coefficient', 6)):
                            
                            date = item.get('date', 'N/A')
                            coefficient = item.get('coefficient', 'N/A')
                            
                            try:
                                date = date.replace('Z', '')
                                date_obj = datetime.fromisoformat(date)
                                formatted_date = date_obj.strftime('%d.%m.%Y')
                            except:
                                formatted_date = date
                            
                            if warehouse_name not in filtered_data:
                                filtered_data[warehouse_name] = {
                                    'dates': [],
                                    'tariff': None,
                                    'base_cost': None,
                                    'liter_cost': None
                                }
                            
                            filtered_data[warehouse_name]['dates'].append({
                                'date': formatted_date,
                                'coefficient': coefficient
                            })
                            
                    except (ValueError, TypeError):
                        continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–∞—Ö
                if tariffs_data and 'warehouseList' in tariffs_data:
                    for warehouse in tariffs_data['warehouseList']:
                        warehouse_name = warehouse.get('warehouseName')
                        base_cost = warehouse.get('boxDeliveryBase', 0)
                        liter_cost = warehouse.get('boxDeliveryLiter', 0)
                        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π –¥–ª—è –ù–æ–≤–æ—Å–µ–º–µ–π–∫–∏–Ω–æ
                        if warehouse_name == "–°–∞–º–∞—Ä–∞ (–ù–æ–≤–æ—Å–µ–º–µ–π–∫–∏–Ω–æ)":
                            if "–ù–æ–≤–æ—Å–µ–º–µ–π–∫–∏–Ω–æ" in filtered_data:
                                filtered_data["–ù–æ–≤–æ—Å–µ–º–µ–π–∫–∏–Ω–æ"]['tariff'] = warehouse.get('boxDeliveryAndStorageExpr')
                                filtered_data["–ù–æ–≤–æ—Å–µ–º–µ–π–∫–∏–Ω–æ"]['base_cost'] = base_cost
                                filtered_data["–ù–æ–≤–æ—Å–µ–º–µ–π–∫–∏–Ω–æ"]['liter_cost'] = liter_cost
                        elif warehouse_name == "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä":
                            if "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä (–¢–∏—Ö–æ—Ä–µ—Ü–∫–∞—è)" in filtered_data:
                                filtered_data["–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä (–¢–∏—Ö–æ—Ä–µ—Ü–∫–∞—è)"]['tariff'] = warehouse.get('boxDeliveryAndStorageExpr')
                                filtered_data["–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä (–¢–∏—Ö–æ—Ä–µ—Ü–∫–∞—è)"]['base_cost'] = base_cost
                                filtered_data["–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä (–¢–∏—Ö–æ—Ä–µ—Ü–∫–∞—è)"]['liter_cost'] = liter_cost
                        elif warehouse_name in filtered_data:
                            filtered_data[warehouse_name]['tariff'] = warehouse.get('boxDeliveryAndStorageExpr')
                            filtered_data[warehouse_name]['base_cost'] = base_cost
                            filtered_data[warehouse_name]['liter_cost'] = liter_cost
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞
                for warehouse in filtered_data:
                    filtered_data[warehouse]['dates'].sort(key=lambda x: datetime.strptime(x['date'], '%d.%m.%Y'))
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                MAX_MESSAGE_LENGTH = 3500  # –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                current_message = "üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å–∫–ª–∞–¥–æ–≤ (–ö–æ—Ä–æ–±–∞):\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                if target_names:
                    current_message += f"*–¶–µ–ª–µ–≤—ã–µ —Å–∫–ª–∞–¥—ã:* {', '.join(sorted(target_names))}\n"
                if excluded_names:
                    current_message += f"*–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã:* {', '.join(sorted(excluded_names))}\n"
                current_message += "\n"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞—Ä–∞–Ω–µ–µ
                messages = []
                has_data = False
                for warehouse_name, data in filtered_data.items():
                    if not data['dates']:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–ª–∞–¥—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
                        continue
                    has_data = True
                    new_line = f"*{warehouse_name}*:\n"
                    if data['tariff']:
                        tariff = int(data['tariff'])
                        base_cost = data.get('base_cost', 0)
                        liter_cost = data.get('liter_cost', 0)
                        if 0 <= tariff <= 130:
                            new_line += f"–ö—Ñ. —Å–∫–ª–∞–¥–∞: `{data['tariff']}%` ‚úÖ\n"
                            new_line += f"–õ–æ–≥–∏—Å—Ç–∏–∫–∞: `{base_cost} —Ä—É–±.+ {liter_cost} –¥–æ–ø.–ª`\n"
                        elif 131 <= tariff <= 150:
                            new_line += f"–ö—Ñ. —Å–∫–ª–∞–¥–∞: `{data['tariff']}%` ‚ö†Ô∏è\n"
                            new_line += f"–õ–æ–≥–∏—Å—Ç–∏–∫–∞: `{base_cost} —Ä—É–±.+ {liter_cost} –¥–æ–ø.–ª`\n"
                        else:
                            new_line += f"–ö—Ñ. —Å–∫–ª–∞–¥–∞: `{data['tariff']}%` ‚ùå\n"
                            new_line += f"–õ–æ–≥–∏—Å—Ç–∏–∫–∞: `{base_cost} —Ä—É–±.+ {liter_cost} –¥–æ–ø.–ª`\n"
                    for item in data['dates']:
                        new_line += f"--- {item['date']} = {item['coefficient']}\n"
                    new_line += "\n"
                    
                    if len(current_message) + len(new_line) > MAX_MESSAGE_LENGTH:
                        messages.append(current_message)
                        current_message = new_line
                    else:
                        current_message += new_line
                
                if current_message:
                    messages.append(current_message)
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏ —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if not has_data and hasattr(context, 'job'):
                    return
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                keyboard = None
                if target_warehouses and hasattr(context, 'job'):
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            "üîï –í—ã–∫–ª—é—á–∏—Ç—å –¥–æ –∑–∞–≤—Ç—Ä–∞",
                            callback_data=f"disable_warehouses:{','.join(target_names)}"
                        )],
                        [InlineKeyboardButton(
                            "üõë –í—ã–∫–ª—é—á–∏—Ç—å —Å–æ–≤—Å–µ–º",
                            callback_data="stop_auto_coefficients"
                        )]
                    ])

                for i, message in enumerate(messages):
                    try:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é, –µ—Å–ª–∏ —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                        if i == len(messages) - 1 and keyboard:
                            await context.bot.send_message(
                                chat_id=chat_id,
                                text=message,
                                parse_mode='Markdown',
                                reply_markup=keyboard
                            )
                        else:
                            await context.bot.send_message(
                                chat_id=chat_id,
                                text=message,
                                parse_mode='Markdown'
                            )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {i+1}/{len(messages)}: {str(e)}")
                        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—è–º–∏
                        try:
                            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 3000 —Å–∏–º–≤–æ–ª–æ–≤
                            parts = [message[i:i+3000] for i in range(0, len(message), 3000)]
                            for j, part in enumerate(parts):
                                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                                if i == len(messages) - 1 and j == len(parts) - 1 and keyboard:
                                    await context.bot.send_message(
                                        chat_id=chat_id,
                                        text=f"–ß–∞—Å—Ç—å {j+1} –∏–∑ {len(parts)}:\n{part}",
                                        parse_mode='Markdown',
                                        reply_markup=keyboard
                                    )
                                else:
                                    await context.bot.send_message(
                                        chat_id=chat_id,
                                        text=f"–ß–∞—Å—Ç—å {j+1} –∏–∑ {len(parts)}:\n{part}",
                                        parse_mode='Markdown'
                                    )
                        except Exception as e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —Ä–∞–∑–±–∏—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                self.mongo.update_last_notification(chat_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã
                if paused_warehouses:
                    last_notification = self.mongo.get_last_notification(chat_id)
                    if last_notification:
                        working_hours = settings.get('working_hours', {})
                        next_day_start = datetime.combine(
                            last_notification.date() + timedelta(days=1),
                            time(hour=working_hours.get('start', 9))
                        )
                        if datetime.utcnow() >= next_day_start:
                            # –û—á–∏—â–∞–µ–º paused —Å–∫–ª–∞–¥—ã
                            self.mongo.update_user_settings(chat_id, {
                                'warehouses': {
                                    'paused': []
                                }
                            })
            
        except Exception as e:
            logger.critical(f"CRITICAL ERROR for chat {chat_id}: {str(e)}", exc_info=True)
            await context.bot.send_message(chat_id=chat_id, text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

    async def process_disable_warehouses(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–í—ã–∫–ª—é—á–∏—Ç—å –¥–æ –∑–∞–≤—Ç—Ä–∞'"""
        query = update.callback_query
        user_id = query.from_user.id
        warehouses = query.data.split(':')[1].split(',')
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = self.mongo.get_user_settings(user_id)
            if not settings:
                await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–∫–ª–∞–¥–æ–≤ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π
            warehouses_data = await self.get_warehouse_list(context, user_id)
            if not warehouses_data:
                await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤")
                return
                
            # –ù–∞—Ö–æ–¥–∏–º ID —Å–∫–ª–∞–¥–æ–≤ –ø–æ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è–º
            warehouse_ids = []
            for warehouse_name in warehouses:
                warehouse_id = next((id for id, name in warehouses_data.items() if name == warehouse_name), None)
                if warehouse_id:
                    warehouse_ids.append(str(warehouse_id))
            
            if warehouse_ids:
                # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–∫–ª–∞–¥–æ–≤ –≤ paused
                self.mongo.update_user_settings(user_id, {
                    'warehouses': {
                        'paused': warehouse_ids
                    }
                })
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
                await context.bot.send_message(
                    chat_id=user_id,
                    text="‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–∫–ª–∞–¥–∞–º –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–æ –∑–∞–≤—Ç—Ä–∞"
                )
                await query.answer()
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID —Å–∫–ª–∞–¥–æ–≤")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–æ–≤: {str(e)}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–æ–≤")

    async def process_stop_auto_coefficients(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–í—ã–∫–ª—é—á–∏—Ç—å —Å–æ–≤—Å–µ–º'"""
        query = update.callback_query
        user_id = query.from_user.id
        
        try:
            await self.stop_auto_coefficients(user_id)
            await query.answer("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–≤—Ç–æ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {str(e)}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–≤—Ç–æ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")

    async def start_auto_coefficients(self, chat_id: int):
        try:
            logger.info(f"Starting auto coefficients for user {chat_id}")
            
            if chat_id in self.active_coefficient_jobs:
                logger.info(f"Removing existing job for user {chat_id}")
                self.active_coefficient_jobs[chat_id].schedule_removal()
            
            settings = self.mongo.get_user_settings(chat_id)
            if not settings:
                logger.error(f"No settings found for user {chat_id} in start_auto_coefficients")
                return None
                
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            interval = settings.get('intervals', {}).get('check_coefficients', 1)
            logger.info(f"Using interval {interval} minutes for user {chat_id}")
            
            job = self.application.job_queue.run_repeating(
                callback=self.get_warehouse_coefficients,
                interval=timedelta(minutes=interval),
                first=0,
                chat_id=chat_id,
                name=f"coefficients_{chat_id}"
            )
            
            logger.info(f"Created new job for user {chat_id}")
            self.active_coefficient_jobs[chat_id] = job
            self.mongo.update_auto_coefficients(chat_id, True)
            self.mongo.log_activity(chat_id, 'start_auto_coefficients')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
            is_working = self.is_working_time(chat_id, True)
            logger.info(f"Working time check for user {chat_id}: {is_working}")
            
            return job
        except Exception as e:
            logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: {str(e)}", exc_info=True)
            raise

    async def stop_auto_coefficients(self, chat_id: int):
        try:
            if chat_id in self.active_coefficient_jobs:
                self.active_coefficient_jobs[chat_id].schedule_removal()
                del self.active_coefficient_jobs[chat_id]
                self.mongo.update_auto_coefficients(chat_id, False)
                # –û—á–∏—â–∞–µ–º paused –∏ target —Å–∫–ª–∞–¥—ã
                self.mongo.update_user_settings(chat_id, {
                    'warehouses': {
                        'paused': [],
                        'target': []
                    }
                })
                self.mongo.log_activity(chat_id, 'stop_auto_coefficients')
                return True
            return False
        except Exception as e:
            logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: {str(e)}", exc_info=True)
            raise

    async def get_warehouse_list(self, context: ContextTypes.DEFAULT_TYPE, chat_id: int = None):
        try:
            if chat_id is None:
                if hasattr(context, 'job') and context.job:
                    chat_id = context.job.chat_id
                elif hasattr(context, '_chat_id'):
                    chat_id = context._chat_id
                else:
                    return None

            wb_token = self.user_data.get_user_token(chat_id)
            if not wb_token:
                return None

            headers = {
                'Accept': 'application/json',
                'Authorization': wb_token
            }
            
            settings = self.mongo.get_user_settings(chat_id)
            async with aiohttp.ClientSession() as session:
                response = await self.make_api_request(session, settings['api']['urls']['coefficients'], headers, context, chat_id)
                
                if not response or not isinstance(response, list):
                    return None
                
                warehouses = {}
                for item in response:
                    warehouse_id = item.get('warehouseID')
                    warehouse_name = item.get('warehouseName')
                    if warehouse_id and warehouse_name:
                        warehouses[warehouse_id] = warehouse_name
                
                return warehouses
        except Exception as e:
            logger.critical(f"CRITICAL ERROR for chat {chat_id}: {str(e)}", exc_info=True)
            return None

    async def show_warehouse_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, page=0):
        try:
            chat_id = update.effective_chat.id
            warehouses = await self.get_warehouse_list(context, chat_id)
            
            if not warehouses:
                if update.callback_query:
                    await update.callback_query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤")
                else:
                    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤")
                return
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∫–ª–∞–¥—ã –ø–æ –∏–º–µ–Ω–∏
            sorted_warehouses = dict(sorted(warehouses.items(), key=lambda x: x[1]))
            
            # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã –∏–∑ –ë–î
            selected_warehouses = set(self.mongo.get_selected_warehouses(chat_id))
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã
            available_warehouses = {k: v for k, v in sorted_warehouses.items() if k not in selected_warehouses}
            
            if not available_warehouses:
                if update.callback_query:
                    await update.callback_query.message.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞")
                else:
                    await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞")
                return
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 25 —Å–∫–ª–∞–¥–æ–≤
            warehouse_items = list(available_warehouses.items())
            total_pages = (len(warehouse_items) + 24) // 25
            start_idx = page * 25
            end_idx = min(start_idx + 25, len(warehouse_items))
            
            keyboard = []
            for warehouse_id, warehouse_name in warehouse_items[start_idx:end_idx]:
                keyboard.append([InlineKeyboardButton(f"-- {warehouse_name} --", callback_data=f"select_warehouse_{warehouse_id}")])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            nav_buttons = []
            if page > 0:
                nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"warehouse_page_{page-1}"))
            if page < total_pages - 1:
                nav_buttons.append(InlineKeyboardButton("–î–∞–ª–µ–µ ‚ñ∂Ô∏è", callback_data=f"warehouse_page_{page+1}"))
            if nav_buttons:
                keyboard.append(nav_buttons)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∫–ª–∞–¥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã
            if selected_warehouses:
                keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π", callback_data="remove_last_warehouse")])
            
            keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_warehouse_selection")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            message_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤:\n"
            if selected_warehouses:
                message_text += "\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã:\n"
                for warehouse_id in selected_warehouses:
                    message_text += f"- {warehouses.get(warehouse_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥')}\n"
            
            if update.callback_query:
                await update.callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            else:
                await update.message.reply_text(message_text, reply_markup=reply_markup)
                
        except Exception as e:
            logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –≤ show_warehouse_selection: {str(e)}", exc_info=True)
            if update.callback_query:
                await update.callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤")
            else:
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤")

    async def handle_warehouse_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        try:
            await query.answer()
        except telegram.error.BadRequest as e:
            if "Query is too old" in str(e) or "query id is invalid" in str(e):
                logger.warning(f"Callback query is too old or invalid: {str(e)}")
            else:
                raise e
        
        chat_id = update.effective_chat.id
        
        if query.data.startswith("select_warehouse_"):
            warehouse_id = int(query.data.split("_")[-1])
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–∫–ª–∞–¥—ã –∏–∑ –ë–î
            current_warehouses = self.mongo.get_selected_warehouses(chat_id)
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–∫–ª–∞–¥
            current_warehouses.append(warehouse_id)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ –ë–î
            self.mongo.save_selected_warehouses(chat_id, current_warehouses)
            await self.show_warehouse_selection(update, context)
            
        elif query.data.startswith("warehouse_page_"):
            page = int(query.data.split("_")[-1])
            await self.show_warehouse_selection(update, context, page)
            
        elif query.data == "remove_last_warehouse":
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–∫–ª–∞–¥—ã –∏–∑ –ë–î
                current_warehouses = self.mongo.get_selected_warehouses(chat_id)
                if current_warehouses:
                    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫–ª–∞–¥
                    removed_warehouse = current_warehouses.pop()
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ –ë–î
                    self.mongo.save_selected_warehouses(chat_id, current_warehouses)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞
                    warehouses = await self.get_warehouse_list(context, chat_id)
                    removed_name = warehouses.get(removed_warehouse, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥')
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–µ–∫—É—â–∏–º —Å–ø–∏—Å–∫–æ–º —Å–∫–ª–∞–¥–æ–≤
                    await self.show_warehouse_selection(update, context, 0)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=f"üóë –£–¥–∞–ª–µ–Ω —Å–∫–ª–∞–¥: {removed_name}"
                    )
            except Exception as e:
                logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∫–ª–∞–¥–∞: {str(e)}", exc_info=True)
                await query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–∞")
            
        elif query.data == "finish_warehouse_selection":
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–∫–ª–∞–¥—ã –∏–∑ –ë–î
            current_warehouses = self.mongo.get_selected_warehouses(chat_id)
            if current_warehouses:
                await self.start_auto_coefficients(chat_id)
                await query.message.edit_text(
                    f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã (–∫–∞–∂–¥—ã–µ {CONFIG['CHECK_COEFFICIENTS_INTERVAL']} –º–∏–Ω—É—Ç(—ã) –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è)"
                )
            else:
                await query.message.edit_text("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞")
                # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
                await start(update, context)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            user_id = update.effective_user.id
            # –ü–µ—Ä–µ–¥–∞–µ–º telegram_user –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            self.mongo.update_user_activity(user_id, update.effective_user)
            
            if context.user_data.get('waiting_for_token'):
                token = update.message.text.strip()
                self.user_data.add_user(user_id, token)
                self.mongo.init_user(user_id)
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
                self.mongo.log_activity(user_id, 'token_added')
                context.user_data['waiting_for_token'] = False
                
                await update.message.reply_text(
                    "‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞. –£–¥–∞—á–∏!\n\n"
                    "–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
                )
            elif context.user_data.get('waiting_for_broadcast'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏
                subscription_level = self.mongo.get_subscription_level(user_id)
                if subscription_level != "Admin":
                    await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
                    return
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                context.user_data['broadcast_text'] = update.message.text
                await update.message.reply_text(
                    "‚úÖ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."
                )
            else:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.mongo.log_activity(user_id, 'message_received')
                await update.message.reply_text(
                    "–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
                )
                
        except Exception as e:
            logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}", exc_info=True)
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")

    async def get_warehouse_tariffs(self, context: ContextTypes.DEFAULT_TYPE, chat_id: int = None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤ —Å–∫–ª–∞–¥–æ–≤"""
        try:
            if chat_id is None:
                if hasattr(context, 'job') and context.job:
                    chat_id = context.job.chat_id
                elif hasattr(context, '_chat_id'):
                    chat_id = context._chat_id
                else:
                    return None

            wb_token = self.user_data.get_user_token(chat_id)
            if not wb_token:
                return None

            headers = {
                'Accept': 'application/json',
                'Authorization': wb_token
            }
            
            settings = self.mongo.get_user_settings(chat_id)
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            current_date = datetime.now().strftime('%Y-%m-%d')
            url = settings['api']['urls']['warehouse_tariffs'].format(date_now=current_date)
            
            async with aiohttp.ClientSession() as session:
                response = await self.make_api_request(session, url, headers, context, chat_id)
                
                if not response or 'response' not in response or 'data' not in response['response']:
                    return None
                
                return response['response']['data']
        except Exception as e:
            logger.critical(f"CRITICAL ERROR getting warehouse tariffs for chat {chat_id}: {str(e)}", exc_info=True)
            return None

    async def admin_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin_statistics"""
        try:
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏
            subscription_level = self.mongo.get_subscription_level(user_id)
            if subscription_level != "Admin":
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = self.mongo.get_user_statistics()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total']}\n"
                f"Base: {stats['base']}\n"
                f"Premium: {stats['premium']}"
            )
            
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            
    async def get_sales_data(self, context: ContextTypes.DEFAULT_TYPE, period_type: str = 'day'):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö"""
        try:
            chat_id = context.job.chat_id if hasattr(context, 'job') else context._chat_id
            
            wb_token = self.user_data.get_user_token(chat_id)
            if not wb_token:
                await context.bot.send_message(chat_id=chat_id, text="‚ùå –¢–æ–∫–µ–Ω WB –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None

            headers = {
                'Accept': 'application/json',
                'Authorization': wb_token
            }
            
            settings = self.mongo.get_user_settings(chat_id)
            if not settings:
                logger.error(f"No settings found for user {chat_id}")
                return None

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞
            now = datetime.now(self.timezone)
            if period_type == 'day':
                begin_date = now.replace(hour=0, minute=0, second=1)
                end_date = now.replace(hour=23, minute=59, second=59)
            else:  # week
                begin_date = (now - timedelta(days=7)).replace(hour=0, minute=0, second=1)
                end_date = now.replace(hour=23, minute=59, second=59)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            request_data = {
                "brandNames": [],
                "objectIDs": [],
                "tagIDs": [],
                "nmIDs": [],
                "timezone": "Europe/Moscow",
                "period": {
                    "begin": begin_date.strftime("%Y-%m-%d %H:%M:%S"),
                    "end": end_date.strftime("%Y-%m-%d %H:%M:%S")
                },
                "orderBy": {
                    "field": "ordersSumRub",
                    "mode": "asc"
                },
                "page": 1
            }

            timeout = aiohttp.ClientTimeout(total=60)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                response = await self.make_api_request(
                    session,
                    settings['api']['urls']['sales_request'],
                    headers,
                    context,
                    chat_id,
                    method='POST',
                    json_data=request_data
                )

                if not response or 'data' not in response:
                    return None

                return response['data']

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö: {str(e)}")
            return None

    async def format_sales_message(self, sales_data: dict, period_type: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ–¥–∞–∂"""
        try:
            if not sales_data or 'cards' not in sales_data:
                return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö"

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º –∏ –∞—Ä—Ç–∏–∫—É–ª–∞–º
            sales_by_day = {}
            total_orders = 0
            total_sum = 0

            for card in sales_data['cards']:
                vendor_code = card.get('vendorCode', 'N/A')
                stats = card.get('statistics', {}).get('selectedPeriod', {})
                orders_count = stats.get('ordersCount', 0)
                orders_sum = stats.get('ordersSumRub', 0)

                if orders_count > 0:
                    total_orders += orders_count
                    total_sum += orders_sum

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ –ø–µ—Ä–∏–æ–¥–∞
                    begin_date = datetime.fromisoformat(stats.get('begin', '').replace('Z', ''))
                    date_str = begin_date.strftime('%d.%m.%Y')

                    if date_str not in sales_by_day:
                        sales_by_day[date_str] = []

                    sales_by_day[date_str].append({
                        'vendor_code': vendor_code,
                        'orders_count': orders_count
                    })

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if period_type == 'day':
                message = f"–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ {list(sales_by_day.keys())[0]}:\n"
            else:
                message = f"–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ {list(sales_by_day.keys())[0]} - {list(sales_by_day.keys())[-1]}:\n"

            for date, sales in sales_by_day.items():
                for sale in sales:
                    message += f"- –ê—Ä—Ç–∏–∫—É–ª: {sale['vendor_code']}\n"
                    message += f"- –ó–∞–∫–∞–∑–∞–ª–∏: {sale['orders_count']}\n"
                    message += "---------------------------\n"

            message += f"\n–ò—Ç–æ–≥–æ:\n"
            message += f"-- {total_orders} —à—Ç.\n"
            message += f"-- –Ω–∞ {total_sum} —Ä—É–±."

            return message

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–∞—Ö: {str(e)}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"

    async def sales_day(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂ –∑–∞ –¥–µ–Ω—å"""
        try:
            user_id = update.effective_user.id
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å
            self.mongo.log_activity(user_id, 'sales_day_requested')
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
            sales_data = await self.get_sales_data(context, 'day')
            if not sales_data:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö")
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await self.format_sales_message(sales_data, 'day')
            await update.message.reply_text(message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å: {str(e)}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def sales_week(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂ –∑–∞ –Ω–µ–¥–µ–ª—é"""
        try:
            user_id = update.effective_user.id
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
            self.mongo.log_activity(user_id, 'sales_week_requested')
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
            sales_data = await self.get_sales_data(context, 'week')
            if not sales_data:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö")
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await self.format_sales_message(sales_data, 'week')
            await update.message.reply_text(message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é: {str(e)}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def sales_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sales"""
        try:
            user_id = update.effective_user.id
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.mongo.log_activity(user_id, 'sales_menu_opened')
            
            keyboard = [
                [InlineKeyboardButton("–î–µ–Ω—å", callback_data='sales_day')],
                [InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data='sales_week')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂:",
                reply_markup=reply_markup
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        bot = context.bot_data.get('wb_bot')
        if not bot:
            raise Exception("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        user_id = update.effective_user.id
        first_name = update.effective_user.first_name
        last_name = update.effective_user.last_name
        username = update.effective_user.username
        
        logger.info(f"Start command received from user {user_id}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.mongo.log_activity(user_id, 'start_command')
        
        logger.info(f"User exists check: {bot.user_data.is_user_exists(user_id)}")
        
        if not bot.user_data.is_user_exists(user_id):
            logger.info(f"Initializing new user {user_id}")
            await update.message.reply_text(
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Wildberries.\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à WB —Ç–æ–∫–µ–Ω:\n"
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –ê–Ω–∞–ª–∏—Ç–∏–∫–∞, –ü–æ—Å—Ç–∞–≤–∫–∏\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω:"
            )
            context.user_data['waiting_for_token'] = True
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ MongoDB
            bot.mongo.init_user(user_id, first_name, username, last_name)
            logger.info(f"User {user_id} initialized in MongoDB")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            bot.mongo.update_user_activity(user_id, update.effective_user)
            logger.info(f"User {user_id} already exists")
            
            # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subscription_level = bot.mongo.get_subscription_level(user_id)
            
            # –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = "–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
            if subscription_level == "Premium":
                message += "\n\nPremium"
                keyboard = [[InlineKeyboardButton("Premium", callback_data='premium_info')]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(message, reply_markup=reply_markup)
            elif subscription_level == "Admin":
                message += "\n\n–ü—Ä–∏–≤–µ—Ç, Admin!"
                keyboard = [
                    [InlineKeyboardButton("‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ", callback_data='send_messages')],
                    [InlineKeyboardButton("üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_statistics')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(message, reply_markup=reply_markup)
            else:
                await update.message.reply_text(message)
    except Exception as e:
        logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –≤ start: {str(e)}", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    bot = context.bot_data.get('wb_bot')
    
    if not bot:
        await query.message.edit_text("‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
        
    try:
        user_id = update.effective_user.id
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
        bot.mongo.update_user_activity(user_id, update.effective_user)
        
        if query.data == 'premium_info':
            await query.message.edit_text("Premium")
            return
            
        elif query.data == 'send_messages':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏
            subscription_level = bot.mongo.get_subscription_level(user_id)
            if subscription_level != "Admin":
                await query.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
                return
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            context.user_data['waiting_for_broadcast'] = True
            keyboard = [[InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data='broadcast_message')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text(
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
                reply_markup=reply_markup
            )
            return
            
        elif query.data == 'broadcast_message':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏
            subscription_level = bot.mongo.get_subscription_level(user_id)
            if subscription_level != "Admin":
                await query.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
                return
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if 'broadcast_text' not in context.user_data:
                await query.message.edit_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
                return
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = context.user_data['broadcast_text']
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = bot.mongo.get_all_users()
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            banned_users = bot.mongo.get_banned_users()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫—Ä–æ–º–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            success_count = 0
            fail_count = 0
            for user in users:
                if user['user_id'] not in banned_users:
                    try:
                        await context.bot.send_message(
                            chat_id=user['user_id'],
                            text=message_text
                        )
                        success_count += 1
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {str(e)}")
                        fail_count += 1
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ
            await query.message.edit_text(
                f"‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
                f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
                f"–û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: {fail_count}"
            )
            # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            del context.user_data['broadcast_text']
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            context.user_data['waiting_for_broadcast'] = False
            return
            
        elif query.data == 'admin_statistics':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏
            subscription_level = bot.mongo.get_subscription_level(user_id)
            if subscription_level != "Admin":
                await query.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = bot.mongo.get_user_statistics()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total']}\n"
                f"Base: {stats['base']}\n"
                f"Premium: {stats['premium']}"
            )
            
            await query.message.edit_text(message)
            return
            
        elif query.data == 'check_coefficients':
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
            bot.mongo.log_activity(user_id, 'coefficients_menu_opened')
            keyboard = [
                [InlineKeyboardButton("–í—Å–µ —Å–∫–ª–∞–¥—ã", callback_data='check_all_coefficients')],
                [InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ –ª–∏–º–∏—Ç—ã", callback_data='start_auto_coefficients')],
                [InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ –ª–∏–º–∏—Ç—ã", callback_data='stop_auto_coefficients')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
            return
            
        elif query.data == 'check_all_stock':
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
            bot.mongo.log_activity(user_id, 'check_all_stock_requested')
            class FakeContext:
                def __init__(self, chat_id, bot):
                    self._chat_id = chat_id
                    self.bot = bot
            fake_context = FakeContext(update.effective_chat.id, context.bot)
            await bot.fetch_wb_data(fake_context)
            
        elif query.data == 'start_auto_stock':
            try:
                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ –æ—Å—Ç–∞—Ç–∫–æ–≤
                bot.mongo.log_activity(user_id, 'start_auto_stock_requested')
                await bot.start_periodic_checks(update.effective_chat.id)
                await query.message.edit_text(
                    f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã (–∫–∞–∂–¥—ã–µ {CONFIG['CHECK_STOCK_INTERVAL']} –º–∏–Ω—É—Ç(—ã) –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è)"
                )
            except Exception as e:
                logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –≤ start_auto_stock: {str(e)}", exc_info=True)
                await query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫")
                
        elif query.data == 'stop_auto_stock':
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∞–≤—Ç–æ –æ—Å—Ç–∞—Ç–∫–æ–≤
            bot.mongo.log_activity(user_id, 'stop_auto_stock_requested')
            if await bot.stop_periodic_checks(update.effective_chat.id):
                await query.message.edit_text("üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            else:
                await query.message.edit_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫")
                
        elif query.data == 'check_all_coefficients':
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
            bot.mongo.log_activity(user_id, 'check_all_coefficients_requested')
            # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã –≤ –ë–î
            bot.mongo.save_selected_warehouses(user_id, [])
                
            class FakeContext:
                def __init__(self, chat_id, bot):
                    self._chat_id = chat_id
                    self.bot = bot
            fake_context = FakeContext(update.effective_chat.id, context.bot)
            await bot.get_warehouse_coefficients(fake_context)
            
        elif query.data == 'start_auto_coefficients':
            try:
                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
                bot.mongo.log_activity(user_id, 'start_auto_coefficients_requested')
                if not CONFIG['TARGET_WAREHOUSE_ID']:
                    await bot.show_warehouse_selection(update, context)
                else:
                    await bot.start_auto_coefficients(update.effective_chat.id)
                    await query.message.edit_text(
                        f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã (–∫–∞–∂–¥—ã–µ {CONFIG['CHECK_COEFFICIENTS_INTERVAL']} –º–∏–Ω—É—Ç(—ã) –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è)"
                    )
            except Exception as e:
                logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –≤ start_auto_coefficients: {str(e)}", exc_info=True)
                await query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫")
                
        elif query.data == 'stop_auto_coefficients':
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∞–≤—Ç–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
            bot.mongo.log_activity(user_id, 'stop_auto_coefficients_requested')
            if await bot.stop_auto_coefficients(update.effective_chat.id):
                await query.message.edit_text("üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            else:
                await query.message.edit_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–æ–≤
        elif query.data.startswith('select_warehouse_'):
            warehouse_id = int(query.data.split('_')[-1])
            chat_id = update.effective_chat.id
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Å–∫–ª–∞–¥–∞
            bot.mongo.log_activity(user_id, f'warehouse_selected_{warehouse_id}')
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–∫–ª–∞–¥—ã –∏–∑ –ë–î
            current_warehouses = bot.mongo.get_selected_warehouses(chat_id)
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–∫–ª–∞–¥
            current_warehouses.append(warehouse_id)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ –ë–î
            bot.mongo.save_selected_warehouses(chat_id, current_warehouses)
            await bot.show_warehouse_selection(update, context)
            
        elif query.data.startswith('warehouse_page_'):
            page = int(query.data.split('_')[-1])
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å–∫–ª–∞–¥–æ–≤
            bot.mongo.log_activity(user_id, f'warehouse_page_{page}')
            await bot.show_warehouse_selection(update, context, page)
            
        elif query.data == 'remove_last_warehouse':
            try:
                chat_id = update.effective_chat.id
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–∫–ª–∞–¥—ã –∏–∑ –ë–î
                current_warehouses = bot.mongo.get_selected_warehouses(chat_id)
                if current_warehouses:
                    # –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∫–ª–∞–¥–∞
                    bot.mongo.log_activity(user_id, 'remove_last_warehouse')
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞
                    warehouses = await bot.get_warehouse_list(context, chat_id)
                    if not warehouses:
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤")
                    
                    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∫–ª–∞–¥
                    removed_warehouse = current_warehouses.pop()
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ –ë–î
                    bot.mongo.save_selected_warehouses(chat_id, current_warehouses)
                    
                    removed_name = warehouses.get(removed_warehouse, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥')
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–µ–∫—É—â–∏–º —Å–ø–∏—Å–∫–æ–º —Å–∫–ª–∞–¥–æ–≤
                    await bot.show_warehouse_selection(update, context, 0)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=f"üóë –£–¥–∞–ª–µ–Ω —Å–∫–ª–∞–¥: {removed_name}"
                    )
            except Exception as e:
                logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∫–ª–∞–¥–∞: {str(e)}", exc_info=True)
                await query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–∞")
            
        elif query.data == 'finish_warehouse_selection':
            chat_id = update.effective_chat.id
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–æ–≤
            bot.mongo.log_activity(user_id, 'finish_warehouse_selection')
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–∫–ª–∞–¥—ã –∏–∑ –ë–î
            current_warehouses = bot.mongo.get_selected_warehouses(chat_id)
            if current_warehouses:
                await bot.start_auto_coefficients(chat_id)
                await query.message.edit_text(
                    f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã (–∫–∞–∂–¥—ã–µ {CONFIG['CHECK_COEFFICIENTS_INTERVAL']} –º–∏–Ω—É—Ç(—ã) –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è)"
                )
            else:
                await query.message.edit_text("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞")
                # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
                await start(update, context)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        elif query.data.startswith('disable_warehouses:'):
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –¥–æ –∑–∞–≤—Ç—Ä–∞
            bot.mongo.log_activity(user_id, 'disable_warehouses_until_tomorrow')
            await bot.process_disable_warehouses(update, context)
            
        elif query.data == 'stop_auto_coefficients':
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            bot.mongo.log_activity(user_id, 'stop_auto_coefficients_completely')
            await bot.process_stop_auto_coefficients(update, context)
                
        elif query.data == 'sales_day':
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å
            bot.mongo.log_activity(user_id, 'sales_day_requested')
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
            sales_data = await bot.get_sales_data(context, 'day')
            if not sales_data:
                await query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö")
                return
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await bot.format_sales_message(sales_data, 'day')
            await query.message.edit_text(message)
            
        elif query.data == 'sales_week':
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
            bot.mongo.log_activity(user_id, 'sales_week_requested')
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
            sales_data = await bot.get_sales_data(context, 'week')
            if not sales_data:
                await query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö")
                return
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await bot.format_sales_message(sales_data, 'week')
            await query.message.edit_text(message)

    except Exception as e:
        logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {str(e)}", exc_info=True)
        await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(CONFIG['TG_API_KEY']).build()
    bot = WBStockBot(application)
    application.bot_data['wb_bot'] = bot
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    async def check_all_stock(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            bot = context.bot_data.get('wb_bot')
            if not bot:
                raise Exception("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            user_id = update.effective_user.id
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Å—Ç–∞—Ç–∫–æ–≤
            bot.mongo.log_activity(user_id, 'check_stock_requested')
            
            class FakeContext:
                def __init__(self, chat_id, bot):
                    self._chat_id = chat_id
                    self.bot = bot
            fake_context = FakeContext(update.effective_chat.id, context.bot)
            await bot.fetch_wb_data(fake_context)
        except Exception as e:
            logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –≤ check_all_stock: {str(e)}", exc_info=True)
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
    
    async def check_stock(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            bot = context.bot_data.get('wb_bot')
            if not bot:
                raise Exception("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            user_id = update.effective_user.id
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Å—Ç–∞—Ç–∫–æ–≤
            bot.mongo.log_activity(user_id, 'check_stock_menu_opened')

            keyboard = [
                [InlineKeyboardButton("–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö", callback_data='check_all_stock')],
                [InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ –æ—Å—Ç–∞—Ç–∫–∏", callback_data='start_auto_stock')],
                [InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ –æ—Å—Ç–∞—Ç–∫–∏", callback_data='stop_auto_stock')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        except Exception as e:
            logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –≤ check_stock: {str(e)}", exc_info=True)
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
    
    async def start_auto_stock(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            bot = context.bot_data.get('wb_bot')
            if not bot:
                raise Exception("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            user_id = update.effective_user.id
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            bot.mongo.log_activity(user_id, 'auto_stock_started')
            
            await bot.start_periodic_checks(update.effective_chat.id)
            await update.message.reply_text(
                f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã (–∫–∞–∂–¥—ã–µ {CONFIG['CHECK_STOCK_INTERVAL']} –º–∏–Ω—É—Ç(—ã) –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è)"
            )
        except Exception as e:
            logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –≤ start_auto_stock: {str(e)}", exc_info=True)
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
    
    async def stop_auto_stock(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            bot = context.bot_data.get('wb_bot')
            if not bot:
                raise Exception("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            user_id = update.effective_user.id
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            bot.mongo.log_activity(user_id, 'auto_stock_stopped')
            
            if await bot.stop_periodic_checks(update.effective_chat.id):
                await update.message.reply_text("üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            else:
                await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫")
        except Exception as e:
            logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –≤ stop_auto_stock: {str(e)}", exc_info=True)
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
    
    async def check_coefficients(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            bot = context.bot_data.get('wb_bot')
            if not bot:
                raise Exception("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            user_id = update.effective_user.id
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
            bot.mongo.log_activity(user_id, 'check_coefficients_requested')

            keyboard = [
                [InlineKeyboardButton("–í—Å–µ —Å–∫–ª–∞–¥—ã", callback_data='check_all_coefficients')],
                [InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ –ª–∏–º–∏—Ç—ã", callback_data='start_auto_coefficients')],
                [InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ –ª–∏–º–∏—Ç—ã", callback_data='stop_auto_coefficients')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        except Exception as e:
            logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –≤ check_coefficients: {str(e)}", exc_info=True)
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
    
    async def user_account(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            bot = context.bot_data.get('wb_bot')
            if not bot:
                raise Exception("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            user_id = update.effective_user.id
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            bot.mongo.update_user_activity(user_id, update.effective_user)
            
            # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏
            subscription_level = bot.mongo.get_subscription_level(user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"–í–∞—à user ID: {user_id}\n"
                f"–°—Ç–∞—Ç—É—Å: {subscription_level}"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è Premium –∏ Admin
            if subscription_level != "Base":
                subscription_end_date = bot.mongo.get_subscription_end_date(user_id)
                message += f"\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_end_date}"
            
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –≤ user_account: {str(e)}", exc_info=True)
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
    
    async def send_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            bot = context.bot_data.get('wb_bot')
            if not bot:
                raise Exception("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            user_id = update.effective_user.id
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏
            subscription_level = bot.mongo.get_subscription_level(user_id)
            if subscription_level != "Admin":
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            context.user_data['waiting_for_broadcast'] = True
            
            keyboard = [[InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data='broadcast_message')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –≤ send_messages: {str(e)}", exc_info=True)
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")

    async def broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            bot = context.bot_data.get('wb_bot')
            if not bot:
                raise Exception("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            user_id = update.effective_user.id
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏
            subscription_level = bot.mongo.get_subscription_level(user_id)
            if subscription_level != "Admin":
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = update.message.text
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = bot.mongo.get_all_users()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            banned_users = bot.mongo.get_banned_users()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫—Ä–æ–º–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            success_count = 0
            fail_count = 0
            
            for user in users:
                if user['user_id'] not in banned_users:
                    try:
                        await context.bot.send_message(
                            chat_id=user['user_id'],
                            text=message_text
                        )
                        success_count += 1
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {str(e)}")
                        fail_count += 1
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ
            await update.message.reply_text(
                f"‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
                f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
                f"–û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: {fail_count}"
            )
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            context.user_data['waiting_for_broadcast'] = False
            
        except Exception as e:
            logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –≤ broadcast_message: {str(e)}", exc_info=True)
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("check_stock", check_stock))
    application.add_handler(CommandHandler("check_all_stock", check_all_stock))
    application.add_handler(CommandHandler("start_auto_stock", start_auto_stock))
    application.add_handler(CommandHandler("stop_auto_stock", stop_auto_stock))
    application.add_handler(CommandHandler("check_coefficients", check_coefficients))
    application.add_handler(CommandHandler("user_account", user_account))
    application.add_handler(CommandHandler("send_messages", send_messages))
    application.add_handler(CommandHandler("sales", bot.sales_menu))  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sales
    
    async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            bot = context.bot_data.get('wb_bot')
            if not bot:
                raise Exception("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            user_id = update.effective_user.id
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            bot.mongo.update_user_activity(user_id, update.effective_user)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            message = (
                "ü§ñ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ*\n\n"
                "–ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö (FBW) –≤ —Ä—É—á–Ω–æ–º –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ. –£–º–µ–µ—Ç –∏—Å–∫–∞—Ç—å –ª–∏–º–∏—Ç—ã –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø—Ä–∏–µ–º–∫—É –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É. –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.\n\n"
                "‚ö†Ô∏è *–í–∞–∂–Ω–æ:*\n"
                "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–¥–µ—Ç—Å—è –æ–¥–Ω–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º, –ø–æ—ç—Ç–æ–º—É —Ç–µ—Ä–ø–∏—Ç–µ ;-)\n"
                "–Ø —Ç–∞–∫–æ–π-–∂–µ —Å–µ–ª–ª–µ—Ä, –∫–∞–∫ –∏ –≤—ã, –ø–æ—ç—Ç–æ–º—É –ø–æ–Ω–∏–º–∞—é –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏.\n"
                "–û—à–∏–±–∫–∏ –ø—Ä–∞–≤–ª—é, –Ω–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ–±–∞–≤–ª—è—é.\n"
                "–í–æ–∑–º–æ–∂–Ω—ã –ø–æ—Ç–µ—Ä–∏ –≤–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫, –Ω–æ —è —Å—Ç–∞—Ä–∞—é—Å—å —ç—Ç–æ–≥–æ –∏–∑–±–µ–∂–∞—Ç—å.\n"
            )
            
            await update.message.reply_text(
                message,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
            
        except Exception as e:
            logger.critical(f"CRITICAL: –û—à–∏–±–∫–∞ –≤ info: {str(e)}", exc_info=True)
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info
    application.add_handler(CommandHandler("info", info))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(button_handler))
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    def signal_handler(signum, frame):
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        asyncio.create_task(application.stop())
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == '__main__':
    main()